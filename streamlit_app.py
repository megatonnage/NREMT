import streamlit as st import json  # --- Page Configuration --- st.set_page_config(     page_title="EMT Scenario Simulator",     page_icon="🚑",     layout="centered" )  # --- State Management --- # Streamlit's session state is used to store variables that persist between user interactions. # We initialize our needed variables here if they don't already exist. if 'screen' not in st.session_state:     st.session_state.screen = 'main_menu' if 'scenario_library' not in st.session_state:     st.session_state.scenario_library = None if 'current_scenario' not in st.session_state:     st.session_state.current_scenario = None if 'current_node' not in st.session_state:     st.session_state.current_node = 'start' if 'feedback_log' not in st.session_state:     st.session_state.feedback_log = []   # --- Core Functions ---  @st.cache_data # Cache the data so it's not reloaded on every interaction def load_scenario_data(uploaded_file):     """Loads scenario data from an uploaded JSON file."""     if uploaded_file is not None:         try:             return json.load(uploaded_file)         except json.JSONDecodeError:             st.error("Invalid JSON file. Please upload a correctly formatted scenario file.")             return None     return None  def start_scenario(scenario_key):     """Callback function to start a selected scenario."""     st.session_state.current_scenario = scenario_key     st.session_state.current_node = 'start'     st.session_state.feedback_log = []     st.session_state.screen = 'in_scenario' # Switch to the scenario view  def make_choice(target, feedback):     """Callback function when a user makes a decision."""     st.session_state.feedback_log.append(feedback)     st.session_state.current_node = target      def go_to_debrief():     """Switches to the debrief screen."""     st.session_state.screen = 'debrief'  def back_to_menu():     """Resets state and returns to the main menu."""     st.session_state.screen = 'main_menu'     st.session_state.current_scenario = None     st.session_state.current_node = 'start'     st.session_state.feedback_log = []  # --- UI Rendering ---  def render_vitals(vitals_dict):     """Renders the patient vitals in a grid format."""     st.subheader("Patient Vitals")     cols = st.columns(3) # Create 3 columns for a tidy layout     col_index = 0     for key, value in vitals_dict.items():         with cols[col_index]:             st.metric(label=key, value=value)         col_index = (col_index + 1) % 3  def render_main_menu():     """Displays the file uploader and scenario selection menu."""     st.title("EMT Scenario Library 🚑")     st.markdown("Upload a `scenarios.json` file to begin. You can create your own library using the provided sample file as a template.")      uploaded_file = st.file_uploader("Choose a scenario file", type="json")          if uploaded_file:         st.session_state.scenario_library = load_scenario_data(uploaded_file)      if st.session_state.scenario_library:         st.header("Select a Scenario")         for key, scenario_data in st.session_state.scenario_library.items():             title = scenario_data.get("title", "Untitled Scenario")             # The on_click callback with args is the key to starting the correct scenario             st.button(title, on_click=start_scenario, args=(key,), use_container_width=True)  def render_scenario():     """Displays the active scenario, vitals, and choices."""     scenario_data = st.session_state.scenario_library[st.session_state.current_scenario]     node_data = scenario_data[st.session_state.current_node]      st.title(scenario_data.get("title", "NREMT Scenario"))     st.divider()      # Display scenario text and vitals     st.markdown(node_data.get("text", ""), unsafe_allow_html=True)     render_vitals(node_data.get("vitals", {}))     st.divider()      # Check if this node is the end of a scenario branch     if node_data.get("is_end", False):         # Add the final feedback and switch to the debrief screen         if "feedback" in node_data:             st.session_state.feedback_log.append(node_data["feedback"])         st.warning(node_data.get("question", "Scenario Ended."))         st.button("View Debrief", on_click=go_to_debrief, use_container_width=True, type="primary")     else:         # Display the question and choice buttons         st.subheader(node_data.get("question", "What do you do next?"))         for choice in node_data.get("choices", []):             st.button(                 choice["text"],                 on_click=make_choice,                 args=(choice["target"], choice["feedback"]),                 use_container_width=True             )  def render_debrief():     """Displays the final feedback log after a scenario is completed."""     st.title("Scenario Debrief")     st.divider()      for item in st.session_state.feedback_log:         feedback_type = item.get("type", "neutral")         text = item.get("text", "")                  if feedback_type == 'good':             st.success(f"✅ **Good Choice:** {text}")         elif feedback_type == 'bad':             st.error(f"❌ **Incorrect Choice:** {text}")         else:             st.warning(f"⚠️ **Note:** {text}")      st.divider()     st.button("Back to Main Menu", on_click=back_to_menu, use_container_width=True, type="primary")  # --- Main Application Router --- # This block checks the 'screen' state and calls the appropriate render function. if st.session_state.screen == 'main_menu':     render_main_menu() elif st.session_state.screen == 'in_scenario':     render_scenario() elif st.session_state.screen == 'debrief':     render_debrief() 
